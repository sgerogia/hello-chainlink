type                            = "directrequest"
schemaVersion                   = 1
# Goerli chain ID = 5
evmChainID                      = 5
name                            = "Flight Stats API job (Goerli)"
# Replace this with the deployed Oracle contract
contractAddress                 = "0xCC79157eb46F5624204f47AB42b3906cAA40eaB7"
# Consumers need to pay â‰¥0.1 LINK per call. 1 LINK = 10^18 Juels
minContractPaymentLinkJuels     = 100000000000000000
# Task is considered failed after 1 min of execution
maxTaskDuration     = "1m"

observationSource   = """
    // Parse the request log and get the CBOR payload inside of it
    decode_log  [type="ethabidecodelog"
                    data="$(jobRun.logData)"
                    topics="$(jobRun.logTopics)"
                    abi="FlightStatusRequest(bytes32 requestID, bytes cborPayload)"
                ]

    decode_cbor [type="cborparse"
                    data="$(decode_log.cborPayload)"
                ]

    // With flight & date make an HTTP fetch
    // Replace the API key before deploying
    flight      [type="http" method=GET
                    url="https://aerodatabox.p.rapidapi.com/flights/number/${decode_cbor.flight}/${decode_cbor.date}"
                    headers="[ \\"X-RapidAPI-Key\\", \\"YOUR_AERODATABOX_KEY\\", \\"X-RapidAPI-Host\\", \\"aerodatabox.p.rapidapi.com\\" ]"
                ]
    decode_log -> decode_cbor -> flight

    // Parse the values we are intgerested in
    // Flight Status
    status       [type="jsonparse" data="$(flight)"
                    path="0.status"
                    separator="."
                ]
    // Arrival airport
    airport     [type="jsonparse" data="$(flight)"
                    path="0.arrival.airport.iata"
                    separator="."
                ]
    // Scheduled Time UTC
    scheduled   [type="jsonparse" data="$(flight)"
                    path="0.arrival.scheduledTimeUtc"
                    separator="."
                ]
    // Actual Time UTC (optional)
    actual      [type="jsonparse" data="$(flight)"
                    path="0.arrival.actualTimeUtc"
                    separator="."
                    lax=true
                ]
    flight -> status
    flight -> airport
    flight -> scheduled
    flight -> actual

    // Compile Oracle multi-variable response
    encode_mvr  [type="ethabiencode"
                    abi="(bytes32 requestId, string _status, string _airport, string _scheduledArrival, string _actualArrival)"
                    data="{\\"requestId\\": $(decode_log.requestId), \\"_status\\": $(status), \\"_airport\\": $(airport), \\"_scheduledArrival\\": $(scheduled), \\"_actualArrival\\": $(actual)}"
                ]
    status -> encode_mvr
    airport -> encode_mvr
    scheduled -> encode_mvr
    actual -> encode_mvr

    // ...and submit trx
    encode_tx   [type="ethabiencode"
                    abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                    data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_mwr)}"
                ]
    submit_tx  [type="ethtx" to="$(contractAddress)" data="$(encode_tx)"]
    encode_mvr -> encode_tx -> submit_tx
"""